@using ManagementPages.Model.Category
@using ManagementPages.Model.InformationBoard
@using ManagementPages.UI.Components.Modals
@using ManagementPages.Services
@inject IDbService _dbService
<NewCategory @ref="NewCategory" OnChangesMade="OnChangesMadeInChildComponent"/>
<EditCategories @ref="EditCategories" InformationBoard="InformationBoard" OnChangesMade="OnChangesMadeInChildComponent"/>

<div class="row col">
    <p class="fw-bold fs-5 border-dark border-2 border-bottom">Kategorier</p>
        <div class="col-9 mt-auto">
            <ul class="nav nav-tabs nav-fill text-nowrap flex-nowrap" style="overflow-x: auto; overflow-y: hidden;">
                @if (InformationBoard?.Categories?.Count > 0)
                {
                    @foreach (var id in InformationBoard.CategoryOrder)
                    {
                        @if (InformationBoard.Categories[id].Equals(InformationBoard.SelectedCategory))
                        {
                            @if (InformationBoard.Categories[id].CategoryDataModel.IsPublished)
                            {
                                <li class="nav-item me-1">
                                    <a @onclick="() => SetSelectedCategory(InformationBoard.Categories[id])" class="nav-link active me-1 text-dark" style="cursor: pointer;">
                                        @InformationBoard.Categories[id].CategoryDataModel.Title
                                    </a>
                                </li>
                            }
                            else
                            {
                                <li class="nav-item me-1">
                                    <a @onclick="() => SetSelectedCategory(InformationBoard.Categories[id])" class="nav-link active me-1 text-muted" style="cursor: pointer;">
                                        @InformationBoard.Categories[id].CategoryDataModel.Title
                                    </a>
                                </li>
                            }
                        }
                        else
                        {
                            @if (InformationBoard.Categories[id].CategoryDataModel.IsPublished)
                            {
                                <li class="nav-item me-1">
                                    <a @onclick="() => SetSelectedCategory(InformationBoard.Categories[id])" class="nav-link text-dark me-1" style="cursor: pointer;">
                                        @InformationBoard.Categories[id].CategoryDataModel.Title
                                    </a>
                                </li>
                            }
                            else
                            {
                                <li class="nav-item me-1">
                                    <a @onclick="() => SetSelectedCategory(InformationBoard.Categories[id])" class="nav-link me-1 text-muted" style="cursor: pointer;">
                                        @InformationBoard.Categories[id].CategoryDataModel.Title
                                    </a>
                                </li>
                            }
                        }
                    }
                }
                else
                {
                    <li class="mt-2 me-1">Der er ingen kategorier endnu...</li>
                }
            </ul>
        </div>
        <div class="col ps-2">
            <button @onclick="() => NewCategory.Open(InformationBoard)" class="btn btn-secondary me-1 float-end"><i class="bi bi-plus-circle"></i> Ny kategori</button>
            <button @onclick="() => EditCategories.Open()" class="btn btn-secondary me-1 float-end"><i class="bi bi-pencil"></i> Rediger kategorier</button>
        </div>
</div>

@code {
    [Parameter]
    public IInformationBoardModel InformationBoard { get; set; }

    [Parameter]
    public EventCallback OnChangesMade { get; set; } // a method from parent (Admin.razor) must be specified/subscribed when using the component

    private NewCategory NewCategory { get; set; }
    private EditCategories EditCategories { get; set; }

    private void SetSelectedCategory(ICategoryModel selectedCategory)
    {
        InformationBoard.SelectedCategory = selectedCategory;

        // inform parent (Admin.razor) that changes have been made, meaning that it should rerender the entire view
        // this is done, as the displayed posts should be the ones from the selected category, so PostOverview needs to be updated
        OnChangesMade.InvokeAsync();
    }

    private async Task OnChangesMadeInChildComponent()
    {
        // reload categories from data base, so that new categories receive an ID (IDs are generated in the data base)
        //InformationBoard.Categories = await InformationBoard.LoadCategories(_dbService);
        InformationBoard.CheckCategoryOrder();
        await InformationBoard.EditCategoryOrder(_dbService);

        // inform parent (Admin.razor) that changes have been made, meaning that it should rerender the entire view
        await OnChangesMade.InvokeAsync();
    }
}