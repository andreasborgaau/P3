@using ManagementPages.Model.InformationBoard
@using ManagementPages.Services
@inject IDbService _dbService


<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Rediger informationstavle - @SelectedInformationBoard.InformationBoardDataModel.Title</h5>
                <button @onclick="() => Close()" type="button" class="close btn btn-secondary" data-dismiss="modal" aria-label="Close">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
            <div class="col-12 row modal-body">
                <div class="col-4">
                    <label for="title" class="form-label">Rediger navn</label>
                    <input type="text" class="form-control" id="title" @bind-value="SelectedInformationBoard.InformationBoardDataModel.Title">
                </div>
                <div class="col-2"></div>
                <div class="col-6">
                    Privat/Offentlig <br />
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" style="height: 30px; width: 55px" checked=@SelectedInformationBoard.InformationBoardDataModel.IsPublished @bind-value="SelectedInformationBoard.InformationBoardDataModel.IsPublished">
                        </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="() => Close()">Annuller</button>
                <button type="submit" class="btn btn-success" @onclick="() => SaveAndClose()">Gem</button>
            </div>
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {
    public IInformationBoardModel SelectedInformationBoard { get; set; } = new InformationBoardModel();

    [Parameter]
    public EventCallback OnChangesMade { get; set; }

    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public void Open(IInformationBoardModel selectedInformationBoard)
    {
        SelectedInformationBoard = selectedInformationBoard;
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    private void SaveAndClose()
    {
        Close();

        // save changes to database
        SelectedInformationBoard.EditInformationBoard(_dbService);

        // notify InformationBoardOverview about changes
        OnChangesMade.InvokeAsync();
    }
}
