@using ManagementPages.Model.Category
@using ManagementPages.Model.InformationBoard
@using Syncfusion.Blazor.DropDowns
@using ManagementPages.Services
@inject IDbService _dbService

<ManagementPages.UI.Components.Modals.DeleteCategory @ref="DeleteCategory" OnChangesMade="OnChangesMadeInChildComponent"/>

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display: @ModalDisplay">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <a href="C:\Users\EmilieSteinmann\Documents\P3sourcetree\ManagementPages\UI\Components\Modals\EditCategories.razor">C:\Users\EmilieSteinmann\Documents\P3sourcetree\ManagementPages\UI\Components\Modals\EditCategories.razor</a>
                <h5 class="modal-title">Rediger kategorier - @InformationBoard.InformationBoardDataModel.Title</h5>
                <button @onclick="() => Close()" type="button" class="close btn btn-secondary" data-dismiss="modal" aria-label="Close">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>

            <div class="row modal-body">
                <div class="col-3">
                    <label for="title" class="form-label">Rediger titel</label>
                </div>
                <div class="col-1"/>
                <div class="col-2">
                    <label class="form-label">Privat/Offentlig</label> <br/>
                </div>
                <div class="col-3">
                    <label for="author" class="form-label">Ikon</label>
                </div>
                <div class="col-2">
                    <label class="form-label">Farve</label> <br/>
                </div>
            </div>

            @foreach (var id in InformationBoard.CategoryOrder)
            {
                <div class="row modal-body">
                    <div class="col-3">
                        <input type="text" class="form-control" id="title" placeholder="" @bind-value="@InformationBoard.Categories[id].CategoryDataModel.Title"/>
                    </div>
                    <div class="col-1">
                        <button data-dismiss="modal" class="btn btn-danger" @onclick="() => CloseAndOpenDeleteCategory(InformationBoard.Categories[id])">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                    <div class="col-2">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" style="height: 30px; width: 55px" checked=@InformationBoard.Categories[id].CategoryDataModel.IsPublished @bind-value="InformationBoard.Categories[id].CategoryDataModel.IsPublished">
                        </div>
                    </div>
                    <div class="col-3">
                        <SfDropDownList CssClass="form-control" ID="icon" TValue="string" Placeholder="Vælg et ikon" TItem="IconOption" @bind-Value="@InformationBoard.Categories[id].CategoryDataModel.Icon"
                                        DataSource="@Icons">
                            <DropDownListFieldSettings IconCss="BootstrapCode" Value="BootstrapCode" Text="Name"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                    <div class="col-2">
                        <button class="btn btn-primary" disabled>Vælg tema farve</button>
                    </div>


                    @if (!(id == InformationBoard.CategoryOrder.First() || id == InformationBoard.CategoryOrder.Last()))
                    {
                        <div class="col-1 mx-auto">
                            <button class="btn my-0 py-0">
                                <i class="bi bi-arrow-up-circle" style="font-size: 25px"
                                   @onclick="() => MoveUp(id)">
                                </i>
                            </button>
                            <br/>
                            <button class="btn my-0 py-0">
                                <i class="bi bi-arrow-down-circle" style="font-size: 25px"
                                   @onclick="() => MoveDown(id)">
                                </i>
                            </button>
                        </div>
                    }
                    else if (id == InformationBoard.CategoryOrder.First())
                    {
                        <div class="col-1 mx-auto">
                            <br/>
                            <button class="btn my-0 py-0">
                                <i class="bi bi-arrow-down-circle" style="font-size: 25px"
                                   @onclick="() => MoveDown(id)">
                                </i>
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="col-1 mx-auto">
                            <br/>
                            <button class="btn my-0 py-0">
                                <i class="bi bi-arrow-up-circle" style="font-size: 25px"
                                   @onclick="() => MoveUp(id)">
                                </i>
                            </button>
                        </div>
                    }
                </div>
            }
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="() => Close()">Annuller</button>
                <button type="submit" class="btn btn-success" @onclick="() => SaveAndClose()">Gem</button>
            </div>

        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {
    private DeleteCategory DeleteCategory { get; set; }

    [Parameter]
    public IInformationBoardModel InformationBoard { get; set; }

    [Parameter]
    public EventCallback OnChangesMade { get; set; }

    public List<IconOption> Icons = IconOptions.Icons;

    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;


    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    private void CloseAndOpenDeleteCategory(ICategoryModel category)
    {
        Close();
        DeleteCategory.Open(category);
    }

    private void SaveAndClose()
    {
        foreach (var category in InformationBoard.Categories)
        {
            category.Value.EditCategory(_dbService);
        }
        Close();
        OnChangesMade.InvokeAsync();
    }

    public void MoveUp(int id)
    {
        var indexOfCurrent = InformationBoard.CategoryOrder.IndexOf(id);
        InformationBoard.CategoryOrder[indexOfCurrent] = InformationBoard.CategoryOrder[indexOfCurrent - 1];
        InformationBoard.CategoryOrder[indexOfCurrent - 1] = id;

        StateHasChanged();
    }

    public void MoveDown(int id)
    {
        var indexOfCurrent = InformationBoard.CategoryOrder.IndexOf(id);
        InformationBoard.CategoryOrder[indexOfCurrent] = InformationBoard.CategoryOrder[indexOfCurrent + 1];
        InformationBoard.CategoryOrder[indexOfCurrent + 1] = id;

        StateHasChanged();
    }


    private void OnChangesMadeInChildComponent()
    {
        // open edit categories modal again after a category has been deleted in the delete category modal
        Open();

        // notify parent about changes, so that the category overview is rerendered
        OnChangesMade.InvokeAsync();
    }
}
